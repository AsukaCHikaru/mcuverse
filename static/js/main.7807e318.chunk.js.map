{"version":3,"sources":["movies/index.js","App.js","serviceWorker.js","index.js"],"names":["subs","title","Sub","props","sub","search","time","handle","jSub","join","index","toLowerCase","indexOf","react_default","a","createElement","className","onClick","str","el","document","value","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","copyToClipboard","concat","setTimeout","substring","length","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","alert","handleSearchChange","bind","assertThisInitialized","handleAlert","show","setState","event","target","trim","_this2","matches","movies","forEach","movie","includes","push","type","onChange","placeholder","showSubs","showCredits","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7807e318.chunk.js","sourcesContent":["import * as BlackPanther from './Black Panther.json';\nimport * as CaptainMarvel from './Captain Marvel.json';\nimport * as DoctorStrange from './Doctor Strange.json';\nimport * as IAntMan from './I Ant-Man.json';\nimport * as IAvengers from './I Avengers.json';\nimport * as ICaptainAmerica from './I Captain America.json';\nimport * as IGuardiansoftheGalaxy from './I Guardians of the Galaxy.json';\nimport * as IIronMan from './I Iron Man.json';\nimport * as ISpiderMan from './I Spider-Man.json';\nimport * as IThor from './I Thor.json';\nimport * as IIAntMan from './II Ant-Man.json';\nimport * as IIAvengers from './II Avengers.json';\nimport * as IICaptainAmerica from './II Captain America.json';\nimport * as IIGuardiansoftheGalaxy from './II Guardians of the Galaxy.json';\nimport * as IIIronMan from './II Iron Man.json';\nimport * as IIThor from './II Thor.json';\nimport * as IIIAvengers from './III Avengers.json';\nimport * as IIICaptainAmerica from './III Captain America.json';\nimport * as IIIIronMan from './III Iron Man.json';\nimport * as IIIThor from './III Thor.json';\nimport * as IVAvengers from './IV Avengers.json';\nimport * as TheIncredibleHulk from './The Incredible Hulk.json';\n\nconst subs = [\n    {\n        title: \"Black Panther\",\n        subs: BlackPanther.default\n    },\n    {\n        title: \"Captain Marvel\",\n        subs: CaptainMarvel.default\n    }, \n    {\n        title: \"Doctor Strange\",\n        subs: DoctorStrange.default\n    },\n    {\n        title: \"I Ant-Man\",\n        subs: IAntMan.default\n    },\n    {\n        title: \"I Avengers\",\n        subs: IAvengers.default\n    },\n    {\n        title: \"I Captain America\",\n        subs: ICaptainAmerica.default\n    },\n    {\n        title: \"I Guardians of the Galaxy\",\n        subs: IGuardiansoftheGalaxy.default\n    },\n    {\n        title: \"I Iron Man\",\n        subs: IIronMan.default\n    },\n    {\n        title: \"I Spider-Man\",\n        subs: ISpiderMan.default\n    },\n    {\n        title: \"I Thor\",\n        subs: IThor.default\n    },\n    {\n        title: \"II Ant-Man\",\n        subs: IIAntMan.default\n    },\n    {\n        title: \"II Avengers\",\n        subs: IIAvengers.default\n    },\n    {\n        title: \"II Captain America\",\n        subs: IICaptainAmerica.default\n    },\n    {\n        title: \"II Guardians of the Galaxy\",\n        subs: IIGuardiansoftheGalaxy.default\n    },\n    {\n        title: \"II Iron Man\",\n        subs: IIIronMan.default\n    },\n    {\n        title: \"II Thor\",\n        subs: IIThor.default\n    },\n    {\n        title: \"III Avengers\",\n        subs: IIIAvengers.default\n    },\n    {\n        title: \"III Captain America\",\n        subs: IIICaptainAmerica.default\n    },\n    {\n        title: \"III Iron Man\",\n        subs: IIIIronMan.default\n    },\n    {\n        title: \"III Thor\",\n        subs: IIIThor.default\n    },\n    {\n        title: \"IV Avengers\",\n        subs: IVAvengers.default\n    },\n    {\n        title: \"The Incredible Hulk\",\n        subs: TheIncredibleHulk.default\n    }\n];\n\nexport default subs;\n","import React, { Component } from 'react';\nimport './App.css';\nimport movies from './movies/index';\n\n\nfunction copyToClipboard(str) {\n  const el = document.createElement('textarea');\n  el.value = str;\n  el.setAttribute('readonly', '');\n  el.style.position = 'absolute';\n  el.style.left = '-9999px';\n  document.body.appendChild(el);\n  const selected =\n    document.getSelection().rangeCount > 0\n      ? document.getSelection().getRangeAt(0)\n      : false;\n  el.select();\n  document.execCommand('copy');\n  document.body.removeChild(el);\n  if (selected) {\n    document.getSelection().removeAllRanges();\n    document.getSelection().addRange(selected);\n  }\n};\n\nfunction Sub(props) {\n\n  const { sub, search, title, time, handle } = props;\n  let jSub = sub.join(' ');\n\n  const handleClick = () => {\n    copyToClipboard(`${jSub} (*${title} ${time}*)`);\n    handle(true);\n    setTimeout(() => {\n      handle(false);\n    }, 2000);\n  }\n  let index = jSub.toLowerCase().indexOf(search);\n  // if (index >= 0) {\n  return (\n    <div className=\"sub\"\n      onClick={handleClick}\n      title=\"click to copy to clipboard\">\n      <p>\n        {jSub.substring(0, index)}\n        <span className=\"highlight\">{jSub.substring(index, index + search.length)}</span>\n        {jSub.substring(index + search.length)}\n        &nbsp;(<i>{title} {time}</i>)\n      </p>\n    </div>\n  );\n  // }\n}\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { search: '', alert: false };\n\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handleAlert = this.handleAlert.bind(this);\n  }\n\n  handleAlert(show) {\n    this.setState({alert: show});\n  }\n\n  handleSearchChange(event) {\n    this.setState({ search: event.target.value.toLowerCase().trim() });\n  }\n\n  showSubs() {\n    var matches = []\n    movies.forEach(movie => {\n      movie.subs.forEach(sub => {\n        if (sub.sub.join(' ').toLowerCase().includes(this.state.search)) {\n          matches.push(<Sub\n            sub={sub.sub}\n            search={this.state.search}\n            title={movie.title}\n            time={sub.time}\n            handle={this.handleAlert}\n          />)\n        }\n      });\n    });\n    return matches;\n  }\n\n  showCredits() {\n    return (\n      <div className=\"credits\">\n        made by /u/shonnyboymushi\n      </div>\n    );\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"searchContainer\">\n          <input\n            type=\"search\"\n            value={this.state.value}\n            onChange={this.handleSearchChange}\n            placeholder=\"Search verse\"\n          ></input>\n        </div>\n        <div className={`alert ${this.state.alert ? 'alert-show' : 'alert-hide'}`}>Copied to clipobard</div>\n        <div className=\"body\">\n          {this.state.search.length > 3 ? this.showSubs() : this.showCredits()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}